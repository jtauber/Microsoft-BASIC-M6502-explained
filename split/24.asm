SUBTTL	MULTIPLE DIMENSION CODE.
FMAPTR: LDA	COUNT
	ASL	A,
	ADCI	5		;POINT TO ENTRIES. C CLR'D BY ASL.
	ADC	LOWTR
	LDY	LOWTR+1
	BCC	JSRGM
	INY
JSRGM:	STWD	ARYPNT
	RTS

N32768: EXP	144,128,0,0	;-32768.

;
; INTIDX READS A FORMULA FROM THE CURRENT POSITION AND
; TURNS IT INTO A POSITIVE INTEGER
; LEAVING THE RESULT IN FACMO&LO. NEGATIVE ARGUMENTS
; ARE NOT ALLOWED.
;
INTIDX: JSR	CHRGET
	JSR	FRMEVL		;GET A NUMBER
POSINT: JSR	CHKNUM
	LDA	FACSGN
	BMI	NONONO		;IF NEGATIVE, BLOW HIM OUT.
AYINT:	LDA	FACEXP
	CMPI	144		;FAC .GT. 32767?
	BCC	QINTGO
	LDWDI	N32768		;GET ADDR OF -32768.
	JSR	FCOMP		;SEE IF FAC=[[Y,A]].
NONONO: BNE	FCERR		;NO, FAC IS TOO BIG.
QINTGO: JMP	QINT		;GO TO QINT AND SHOVE IT.
;
; FORMAT OF ARRAYS IN CORE.
;
; DESCRIPTOR:
;	LOWBYTE = FIRST CHARACTER.
;	HIGHBYTE = SECOND CHARACTER (200 BIT IS STRING FLAG).
; LENGTH OF ARRAY IN CORE IN BYTES (INCLUDES EVERYTHING).
; NUMBER OF DIMENSIONS.
; FOR EACH DIMENSION STARTING WITH THE FIRST A LIST
; (2 BYTES EACH) OF THE MAX INDICE+1
; THE VALUES
;
ISARY:	LDA	DIMFLG
IFN	INTPRC,<
	ORA	INTFLG>
	PHA			;SAVE [DIMFLG] FOR RECURSION.
	LDA	VALTYP
	PHA			;SAVE [VALTYP] FOR RECURSION.
	LDYI	0		;SET NUMBER OF DIMENSIONS TO ZERO.
INDLOP: TYA			;SAVE NUMBER OF DIMS.
	PHA
	PSHWD	VARNAM		;SAVE LOOKS.
	JSR	INTIDX		;EVALUATE INDICE INTO FACMO&LO.
	PULWD	VARNAM		;GET BACK ALL... WE'RE HOME.
	PLA			;(# OF DIMS).
	TAY
	TSX
	LDA	258,X
	PHA			;PUSH DIMFLG AND VALTYP FURTHER.
	LDA	257,X
	PHA
	LDA	INDICE		;PUT INDICE ONTO STACK.
	STA	258,X,		;UNDER DIMFLG AND VALTYP.
	LDA	INDICE+1
	STA	257,X
	INY			;INCREMENT # OF DIMS.
	JSR	CHRGOT		;GET TERMINATING CHARACTER.
	CMPI	44		;A COMMA?
	BEQ	INDLOP		;YES.
	STY	COUNT		;SAVE COUNT OF DIMS.
	JSR	CHKCLS		;MUST BE CLOSED PAREN.
	PLA
	STA	VALTYP		;GET VALTYP AND
	PLA
IFN	INTPRC,<
	STA	INTFLG
	ANDI	127>
	STA	DIMFLG		;DIMFLG OFF STACK.
	LDX	ARYTAB		;PLACE TO START SEARCH.
	LDA	ARYTAB+1
LOPFDA: STX	LOWTR
	STA	LOWTR+1
	CMP	STREND+1	;END OF ARRAYS?
	BNE	LOPFDV
	CPX	STREND
	BEQ	NOTFDD		;A FINE THING! NO ARRAY!.
LOPFDV: LDYI	0
	LDADY	LOWTR
	INY
	CMP	VARNAM		;COMPARE HIGH ORDERS.
	BNE	NMARY1		;NO WAY IS IT THIS. GET OUT OF HERE.
	LDA	VARNAM+1
	CMPDY	LOWTR		;LOW ORDERS?
	BEQ	GOTARY		;WELL, HERE IT IS !!
NMARY1: INY
	LDADY	LOWTR		;GET LENGTH.
	CLC
	ADC	LOWTR
	TAX
	INY
	LDADY	LOWTR
	ADC	LOWTR+1
	BCC	LOPFDA		;ALWAYS BRANCHES.
BSERR:	LDXI	ERRBS		;GET BAD SUB ERROR NUMBER.
	SKIP2
FCERR:	LDXI	ERRFC		;TOO BIG. "FUNCTION CALL" ERROR.
ERRGO3: JMP	ERROR
GOTARY: LDXI	ERRDD		;PERHAPS A "RE-DIMENSION" ERROR
	LDA	DIMFLG		;TEST THE DIMFLG
	BNE	ERRGO3
	JSR	FMAPTR
	LDA	COUNT		;GET NUMBER OF DIMS INPUT.
	LDYI	4
	CMPDY	LOWTR		;# OF DIMS THE SAME?
	BNE	BSERR		;SAME SO GO GET DEFINITION.
	JMP	GETDEF

;
; HERE WHEN VARIABLE IS NOT FOUND IN THE ARRAY TABLE.
;
; BUILDING AN ENTRY.
;
;	PUT DOWN THE DESCRIPTOR.
;	SETUP NUMBER OF DIMENSIONS.
;	MAKE SURE THERE IS ROOM FOR THE NEW ENTRY.
;	REMEMBER "VARPNT".
;	TALLY=4.
;	SKIP 2 LOCS FOR LATER FILL IN OF SIZE.
; LOOP: GET AN INDICE
;	PUT DOWN NUMBER+1 AND INCREMENT VARPTR.
;	TALLY=TALLY*NUMBER+1.
;	DECREMENT NUMBER-DIMS.
;	BNE LOOP
;	CALL "REASON" WITH [Y,A] REFLECTING LAST LOC OF VARIABLE.
;	UPDATE STREND.
;	ZERO ALL.
;	MAKE TALLY INCLUDE MAXDIMS AND DESCRIPTOR.
;	PUT DOWN TALLY.
;	IF CALLED BY DIMENSION, RETURN.
;	OTHERWISE INDEX INTO THE VARIABLE AS IF IT
;	 WERE FOUND ON THE INITIAL SEARCH.
;
NOTFDD: JSR	FMAPTR		;FORM ARYPNT.
	JSR	REASON
	LDAI	0
	TAY
	STA	CURTOL+1
IFE	ADDPRC,<
	LDXI	4>
IFN	ADDPRC,<
	LDXI	5>
	LDA	VARNAM		;THIS CODE ONLY WORKS FOR INTPRC=1
	STADY	LOWTR		;IF ADDPRC=1.
IFN	ADDPRC,<
	BPL	NOTFLT
	DEX>
NOTFLT: INY
	LDA	VARNAM+1
	STADY	LOWTR
	BPL	STOMLT
	DEX
IFN	ADDPRC,<
	DEX>
STOMLT: STX	CURTOL
	LDA	COUNT
	REPEAT	3,<INY>
	STADY	LOWTR		;SAVE NUMBER OF DIMENSIONS.
LOPPTA: LDXI	11		;DEFAULT SIZE.
	LDAI	0
	BIT	DIMFLG
	BVC	NOTDIM		;NOT IN A DIM STATEMENT.
	PLA			;GET LOW ORDER OF INDICE.
	CLC
	ADCI	1
	TAX
	PLA			;GET HIGH PART OF INDICE.
	ADCI	0
NOTDIM: INY
	STADY	LOWTR		;STORE HIGH PART OF INDICE.
	INY
	TXA
	STADY	LOWTR		;STORE LOW ORDER OF INDICE.
	JSR	UMULT		;[X,A]=[CURTOL]*[LOWTR,Y]
	STX	CURTOL		;SAVE NEW TALLY.
	STA	CURTOL+1
	LDY	INDEX
	DEC	COUNT		;ANY MORE INDICES LEFT?
	BNE	LOPPTA		;YES.
	ADC	ARYPNT+1
	BCS	OMERR1		;OVERFLOW.
	STA	ARYPNT+1	;COMPUTE WHERE TO ZERO.
	TAY
	TXA
	ADC	ARYPNT
	BCC	GREASE
	INY
	BEQ	OMERR1
GREASE: JSR	REASON		;GET ROOM.
	STWD	STREND		;NEW END OF STORAGE.
	LDAI	0		;STORING [ACCA] IS FASTER THAN CLEAR.
	INC	CURTOL+1
	LDY	CURTOL
	BEQ	DECCUR
ZERITA: DEY
	STADY	ARYPNT
	BNE	ZERITA		;NO. CONTINUE.
DECCUR: DEC	ARYPNT+1
	DEC	CURTOL+1
	BNE	ZERITA		;DO ANOTHER BLOCK.
	INC	ARYPNT+1	;BUMP BACK UP. WILL USE LATER.
	SEC
	LDA	STREND		;RESTORE [ACCA].
	SBC	LOWTR		;DETERMINE LENGTH.
	LDYI	2
	STADY	LOWTR		;LOW.
	LDA	STREND+1
	INY
	SBC	LOWTR+1
	STADY	LOWTR		;HIGH.
	LDA	DIMFLG
	BNE	DIMRTS		;BYE.
	INY
;
; AT THIS POINT [LOWTR,Y] POINTS BEYOND THE SIZE TO THE NUMBER OF
; DIMENSIONS. STRATEGY:
;	NUMDIM=NUMBER OF DIMENSIONS.
;	CURTOL=0.
; INLPNM:GET A NEW INDICE.
;	MAKE SURE INDICE IS NOT TOO BIG.
;	MULTIPLY CURTOL BY CURMAX.
;	ADD INDICE TO CURTOL.
;	NUMDIM=NUMDIM-1.
;	BNE	INLPNM.
;	USE [CURTOL]*4 AS OFFSET.
;
GETDEF: LDADY	LOWTR
	STA	COUNT		;SAVE A COUNTER.
	LDAI	0		;ZERO [CURTOL].
	STA	CURTOL
INLPNM: STA	CURTOL+1
	INY
	PLA			;GET LOW INDICE.
	TAX
	STA	INDICE
	PLA			;AND THE HIGH PART
	STA	INDICE+1
	CMPDY	LOWTR		;COMPARE WITH MAX INDICE.
	BCC	INLPN2
	BNE	BSERR7		;IF GREATER, "BAD SUBSCRIPT" ERROR.
	INY
	TXA
	CMPDY	LOWTR
	BCC	INLPN1
BSERR7: JMP	BSERR
OMERR1: JMP	OMERR
INLPN2: INY
INLPN1: LDA	CURTOL+1	;DON'T MULTIPLY IF CURTOL=0.
	ORA	CURTOL
	CLC			;PREPARE TO GET INDICE BACK.
	BEQ	ADDIND		;GET HIGH PART OF INDICE BACK.
	JSR	UMULT		;MULTIPLY [CURTOL] BY [LOWTR,Y,Y+1].
	TXA
	ADC	INDICE		;ADD IN [INDICE].
	TAX
	TYA
	LDY	INDEX1
ADDIND: ADC	INDICE+1
	STX	CURTOL
	DEC	COUNT		;ANY MORE?
	BNE	INLPNM		;YES.
	STA	CURTOL+1	;FIX ARRAY BUG ****
IFE	ADDPRC,<
	LDXI	4>
IFN	ADDPRC,<
	LDXI	5		;THIS CODE ONLY WORKS FOR INTPRC=1
	LDA	VARNAM		;IF ADDPRC=1.
	BPL	NOTFL1
	DEX>
NOTFL1: LDA	VARNAM+1
	BPL	STOML1
	DEX
IFN	ADDPRC,<
	DEX>
STOML1: STX	ADDEND
	LDAI	0
	JSR	UMULTD		;ON RTS, A&Y=HI . X=LO.
	TXA
	ADC	ARYPNT
	STA	VARPNT
	TYA
	ADC	ARYPNT+1
	STA	VARPNT+1
	TAY
	LDA	VARPNT
DIMRTS: RTS			;RETURN TO CALLER.
