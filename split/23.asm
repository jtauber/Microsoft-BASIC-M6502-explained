SUBTTL	DIMENSION AND VARIABLE SEARCHING.
;
; THE "DIM" CODE SETS [DIMFLG] AND THEN FALLS INTO THE VARIABLE SEARCH
; ROUTINE, WHICH LOOKS AT DIMFLG AT THREE DIFFERENT POINTS.
;	1) IF AN ENTRY IS FOUND, "DIMFLG" BEING ON INDICATES
;		A "DOUBLY" DIMENSIONED VARIABLE.
;	2) WHEN A NEW ENTRY IS BEING BUILT "DIMFLG" BEING ON
;		INDICTAES THE INDICES SHOULD BE USED FOR THE
;		SIZE OF EACH INDEX. OTHERWISE THE DEFAULT OF TEN
;		IS USED.
;	3) WHEN THE BUILD ENTRY CODE FINISHES, ONLY IF "DIMFLG" IS OFF
;		WILL INDEXING BE DONE.
;
DIM3:	JSR	CHKCOM		;MUST BE A COMMA
DIM:	TAX			;SET [ACCX] NONZERO.
				;[ACCA] MUST BE NONZERO TO WORK RIGHT.
DIM1:	JSR	PTRGT1
DIMCON: JSR	CHRGOT		;GET LAST CHARACTER.
	BNE	DIM3
	RTS
;
; ROUTINE TO READ THE VARIABLE NAME AT THE CURRENT TEXT POSITION
; AND  PUT A POINTER TO ITS VALUE IN VARPNT. [TXTPTR]
; POINTS TO THE TERMINATING CHARCTER.. NOT THAT EVALUATING SUBSCRIPTS
; IN A VARIABLE NAME CAN CAUSE RECURSIVE CALLS TO "PTRGET" SO AT
; THAT POINT ALL VALUES MUST BE STORED ON THE STACK.
;
PTRGET: LDXI	0		;MAKE [ACCX]=0.
	JSR	CHRGOT		;RETRIEVE LAST CHARACTER.
PTRGT1: STX	DIMFLG		;STORE FLAG AWAY.
PTRGT2: STA	VARNAM
	JSR	CHRGOT		;GET CURRENT CHARACTER
				;MAYBE WITH FUNCTION BIT OFF.
	JSR	ISLETC		;CHECK FOR LETTER.
	BCS	PTRGT3		;MUST HAVE A LETTER.
INTERR: JMP	SNERR
PTRGT3: LDXI	0		;ASSUME NO SECOND CHARACTER.
	STX	VALTYP		;DEFAULT IS NUMERIC.
IFN	INTPRC,<
	STX	INTFLG>		;ASSUME FLOATING.
	JSR	CHRGET		;GET FOLLOWING CHARACTER.
	BCC	ISSEC		;CARRY RESET BY CHRGET IF NUMERIC.
	JSR	ISLETC		;SET CARRY IF NOT ALPHABETIC.
	BCC	NOSEC		;ALLOW ALPHABETICS.
ISSEC:	TAX			;IT IS A NUMBER -- SAVE IN ACCX.
EATEM:	JSR	CHRGET		;LOOK AT NEXT CHARACTER.
	BCC	EATEM		;SKIP NUMERICS.
	JSR	ISLETC
	BCS	EATEM		;SKIP ALPHABETICS.
NOSEC:	CMPI	"$"		;IS IT A STRING?
	BNE	NOTSTR		;IF NOT, [VALTYP]=0.
	LDAI	^O377		;SET [VALTYP]=255 (STRING !).
	STA	VALTYP
IFN	INTPRC,<
	BNEA	TURNON		;ALWAYS GOES.
NOTSTR: CMPI	"%"		;INTEGER VARIABLE?
	BNE	STRNAM		;NO.
	LDA	SUBFLG
	BNE	INTERR
	LDAI	128
	STA	INTFLG		;SET FLAG.
	ORA	VARNAM		;TURN ON BOTH HIGH BITS.
	STA	VARNAM>
TURNON: TXA
	ORAI	128		;TURN ON MSB OF SECOND CHARACTER.
	TAX
	JSR	CHRGET		;GET CHARACTER AFTER $.
IFE	INTPRC,<
NOTSTR:>
STRNAM: STX	VARNAM+1	;STORE AWAY SECOND CHARACTER.
	SEC
	ORA	SUBFLG		;ADD FLAG WHETHER TO ALLOW ARRAYS.
	SBCI	40		;(CHECK FOR "(") WON'T MATCH IF SUBFLG SET. 
	JEQ	ISARY		;IT IS!
	CLR	SUBFLG		;ALLOW SUBSCRIPTS AGAIN.
	LDA	VARTAB		;PLACE TO START SEARCH.
	LDX	VARTAB+1
	LDYI	0
STXFND: STX	LOWTR+1
LOPFND: STA	LOWTR
	CPX	ARYTAB+1	;AT END OF TABLE YET?
	BNE	LOPFN
	CMP	ARYTAB
	BEQ	NOTFNS		;YES. WE COULDN'T FIND IT.
LOPFN:	LDA	VARNAM
	CMPDY	LOWTR		;COMPARE HIGH ORDERS.
	BNE	NOTIT		;NO COMPARISON.
	LDA	VARNAM+1
	INY
	CMPDY	LOWTR		;AND THE LOW PART?
	BEQ	FINPTR		;THAT'S IT ! THAT'S IT !
	DEY
NOTIT:	CLC
	LDA	LOWTR
	ADCI	6+ADDPRC	;MAKES NO DIF AMONG TYPES.
	BCC	LOPFND
	INX
	BNEA	STXFND		;ALWAYS BRANCHES.

;
; TEST FOR A LETTER.	/ CARRY OFF= NOT A LETTER.
;			  CARRY ON= A LETTER.
;
ISLETC: CMPI	"A"
	BCC	ISLRTS		;IF LESS THAN "A", RET.
	SBCI	"Z"+1
	SEC
	SBCI	256-"Z"-1	;RESET CARRY IF [A] .GT. "Z".
ISLRTS: RTS			;RETURN TO CALLER.

NOTFNS: PLA			;CHECK WHO'S CALLING.
	PHA			;RESTORE IT.
	CMPI	ISVRET-1-<ISVRET-1>/256*256	;IS EVAL CALLING?
	BNE	NOTEVL		;NO, CARRY ON.
IFN	REALIO-3,<
	TSX
	LDA	258,X
	CMPI	<<ISVRET-1>/256>
	BNE	NOTEVL>
LDZR:	LDWDI	ZERO		;SET UP PNTR TO SIMULATED ZERO.
	RTS			;FOR STRINGS OR NUMERIC.
				;AND FOR INTEGERS TOO.
NOTEVL:
IFN	TIME!EXTIO,<
	LDWD	VARNAM>
IFN	TIME,<
	CMPI	"T"
	BNE	QSTAVR
	CPYI	"I"+128
	BEQ	LDZR
	CPYI	"I"
	BNE	QSTAVR>
IFN	EXTIO!TIME,<
GOBADV: JMP	SNERR>
QSTAVR:
IFN	EXTIO,<
	CMPI	"S"
	BNE	VAROK
	CPYI	"T"
	BEQ	GOBADV>
VAROK:	LDWD	ARYTAB
	STWD	LOWTR		;LOWEST THING TO MOVE.
	LDWD	STREND		;GET HIGHEST ADDR TO MOVE.
	STWD	HIGHTR
	CLC
	ADCI	6+ADDPRC
	BCC	NOTEVE
	INY
NOTEVE: STWD	HIGHDS		;PLACE TO STUFF IT.
	JSR	BLTU		;MOVE IT ALL.
				;NOTE [Y,A] HAS [HIGHDS] FOR REASON.
	LDWD	HIGHDS		;AND SET UP
	INY
	STWD	ARYTAB		;NEW START OF ARRAY TABLE.
	LDYI	0		;GET ADDR OF VARIABLE ENTRY.
	LDA	VARNAM
	STADY	LOWTR
	INY
	LDA	VARNAM+1
	STADY	LOWTR		;STORE NAME OF VARIABLE.
	LDAI	0
	INY
	STADY	LOWTR
	INY
	STADY	LOWTR
	INY
	STADY	LOWTR
	INY
	STADY	LOWTR		;FOURTH ZERO FOR DEF FUNC.
IFN	ADDPRC,<
	INY
	STADY	LOWTR>
FINPTR: LDA	LOWTR
	CLC
	ADCI	2
	LDY	LOWTR+1
	BCC	FINNOW
	INY
FINNOW: STWD	VARPNT		;THIS IS IT.
	RTS
PAGE
