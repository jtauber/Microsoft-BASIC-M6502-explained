SUBTTL	FLOATING POINT ADDITION AND SUBTRACTION.
FADDH:	LDWDI	FHALF		;ENTRY TO ADD 1/2.
	JMP	FADD		;UNPACK AND GO ADD IT.
FSUB:	JSR	CONUPK		;UNPACK ARGUMENT INTO ARG.
FSUBT:	LDA	FACSGN
	EORI	377		;COMPLEMENT IT.
	STA	FACSGN
	EOR	ARGSGN		;COMPLEMENT ARISGN.
	STA	ARISGN
	LDA	FACEXP		;SET CODES ON FACEXP.
	JMP	FADDT		;[Y]=ARGEXP..
	XLIST
.XCREF
IFN	REALIO-3,<ZSTORDO=STORDO>
IFE	REALIO-3,<
ZSTORD:!	LDA	POKER
	CMPI	146
	BNE	STORDO
	LDA	POKER+1
	SBCI	31
	BNE	STORDO
	STA	POKER
	TAY
	LDAI	200
	STA	POKER+1
MRCHKR: LDXI	12
IF1,<
MRCHR:	LDA	60000,X,>
IF2,<
MRCHR:	LDA	SINCON+36,X,>
	ANDI	77
	STADY	POKER
	INY
	BNE	PKINC
	INC	POKER+1
PKINC:	DEX
	BNE	MRCHR
	DEC	ANDMSK
	BNE	MRCHKR
	RTS
IF2,<PURGE ZSTORD>>
.CREF
	LIST
FADD5:	JSR	SHIFTR		;DO A LONG SHIFT.
	BCC	FADD4		;CONTINUE WITH ADDITION.
FADD:	JSR	CONUPK
FADDT:	JEQ	MOVFA		;IF FAC=0, RESULT IS IN ARG.
	LDX	FACOV
	STX	OLDOV
	LDXI	ARGEXP		;DEFAULT IS SHIFT ARGUMENT.
	LDA	ARGEXP		;IF ARG=0, FAC IS RESULT.
FADDC:	TAY			;ALSO COPY ACCA INTO ACCY.
	BEQ	ZERRTS		;RETURN.
	SEC
	SBC	FACEXP
	BEQ	FADD4		;NO SHIFTING.
	BCC	FADDA		;BR IF ARGEXP.LT.FACEXP.
	STY	FACEXP		;RESULTING EXPONENT.
	LDY	ARGSGN		;SINCE ARG IS BIGGER, IT'S
	STY	FACSGN		;SIGN IS SIGN OF RESULT.
	EORI	377		;SHIFT A NEGATIVE NUMBER OF PLACES.
	ADCI	0		;COMPLETE NEGATION. W/ C=1.
	LDYI	0		;ZERO OLDOV.
	STY	OLDOV
	LDXI	FAC		;SHIFT THE FAC INSTEAD.
	BNE	FADD1
FADDA:	LDYI	0
	STY	FACOV
FADD1:	CMPI	^D256-7		;FOR SPEED AND NECESSITY.  GETS
				;MOST LIKELY CASE TO SHIFTR FASTEST
				;AND ALLOWS SHIFTING OF NEG NUMS
				;BY "QINT".
	BMI	FADD5		;SHIFT BIG.
	TAY
	LDA	FACOV		;SET FACOV.
	LSR	1,X,		;GETS 0 IN MOST SIG BIT.
	JSR	ROLSHF		;DO THE ROLLING.
FADD4:	BIT	ARISGN		;GET RESULTING SIGN.
	BPL	FADD2		;IF POSITIVE, ADD.
				;CARRY IS CLEAR.
FADD3:	LDYI	FACEXP
	CPXI	ARGEXP		;FAC IS BIGGER.
	BEQ	SUBIT
	LDYI	ARGEXP		;ARG IS BIGGER.
SUBIT:	SEC
	EORI	377
	ADC	OLDOV
	STA	FACOV
	LDA	3+ADDPRC,Y
	SBC	3+ADDPRC,X
	STA	FACLO
	LDA	2+ADDPRC,Y
	SBC	2+ADDPRC,X
	STA	FACMO
IFN	ADDPRC,<
	LDA	2,Y
	SBC	2,X
	STA	FACMOH>
	LDA	1,Y
	SBC	1,X
	STA	FACHO
FADFLT: BCS	NORMAL		;HERE IF SIGNS DIFFER. IF CARRY,
				;FAC IS SET OK.
	JSR	NEGFAC		;NEGATE [FAC].
NORMAL: LDYI	0
	TYA
	CLC
NORM3:	LDX	FACHO
	BNE	NORM1
	LDX	FACHO+1		;SHIFT 8 BITS AT A TIME FOR SPEED.
	STX	FACHO
IFN	ADDPRC,<
	LDX	FACMOH+1
	STX	FACMOH>
	LDX	FACMO+1
	STX	FACMO
	LDX	FACOV
	STX	FACLO
	STY	FACOV
	ADCI	10
	CMPI	10*ADDPRC+30
	BNE	NORM3
ZEROFC: LDAI	0		;NOT NEED BY NORMAL BUT BY OTHERS.
ZEROF1: STA	FACEXP		;NUMBER MUST BE ZERO.
ZEROML: STA	FACSGN		;MAKE SIGN POSITIVE.
	RTS			;ALL DONE.
FADD2:	ADC	OLDOV
	STA	FACOV
	LDA	FACLO
	ADC	ARGLO
	STA	FACLO
	LDA	FACMO
	ADC	ARGMO
	STA	FACMO
IFN	ADDPRC,<
	LDA	FACMOH
	ADC	ARGMOH
	STA	FACMOH>
	LDA	FACHO
	ADC	ARGHO
	STA	FACHO
	JMP	SQUEEZ		;GO ROUND IF SIGNS SAME.

NORM2:	ADCI	1		;DECREMENT SHIFT COUNT.
	ASL	FACOV		;SHIFT ALL LEFT ONE BIT.
	ROL	FACLO
	ROL	FACMO
IFN	ADDPRC,<
	ROL	FACMOH>
	ROL	FACHO
NORM1:	BPL	NORM2		;IF MSB=0 SHIFT AGAIN.
	SEC
	SBC	FACEXP
	BCS	ZEROFC
	EORI	377
	ADCI	1		;COMPLEMENT.
	STA	FACEXP
SQUEEZ: BCC	RNDRTS		;BITS TO SHIFT?
RNDSHF: INC	FACEXP
	BEQ	OVERR
	ROR	FACHO
IFN	ADDPRC,<
	ROR	FACMOH>
	ROR	FACMO
	ROR	FACLO
	ROR	FACOV
RNDRTS: RTS			;ALL DONE ADDING.

NEGFAC: COM	FACSGN		;COMPLEMENT FAC	 ENTIRELY.
NEGFCH: COM	FACHO		;COMPLEMENT JUST THE NUMBER.
IFN	ADDPRC,<
	COM	FACMOH>
	COM	FACMO
	COM	FACLO
	COM	FACOV
	INC	FACOV
	BNE	INCFRT
INCFAC: INC	FACLO
	BNE	INCFRT
	INC	FACMO
	BNE	INCFRT		;IF NO CARRY, RETURN.
IFN	ADDPRC,<
	INC	FACMOH
	BNE	INCFRT>
	INC	FACHO		;CARRY INCREMENT.
INCFRT: RTS

OVERR:	LDXI	ERROV
	JMP	ERROR		;TELL USER.
;
; "SHIFTR" SHIFTS [X+1:X+3] [-ACCA]  BITS RIGHT.
; SHIFTS BYTES TO START WITH IF POSSIBLE.
;
MULSHF: LDXI	RESHO-1		;ENTRY POINT FOR MULTIPLIER.
SHFTR2: LDY	3+ADDPRC,X,	;SHIFT BYTES FIRST.
	STY	FACOV
IFN	ADDPRC,<
	LDY	3,X
	STY	4,X>
	LDY	2,X,		;GET MO.
	STY	3,X,		;STORE LO.
	LDY	1,X,		;GET HO.
	STY	2,X,		;STORE MO.
	LDY	BITS
	STY	1,X,		;STORE HO.
SHIFTR: ADCI	10
	BMI	SHFTR2
	BEQ	SHFTR2
	SBCI	10		;C CAN BE EITHER 1,0 AND IT WORKS.
	TAY
	LDA	FACOV
	BCS	SHFTRT		;EQUIV TO BEQ HERE.
IFN	RORSW,<
SHFTR3: ASL	1,X
	BCC	SHFTR4
	INC	1,X
SHFTR4: ROR	1,X
	ROR	1,X>		;YES, TWO OF THEM.
IFE	RORSW,<
SHFTR3: PHA
	LDA	1,X
	ANDI	200
	LSR	1,X
	ORA	1,X
	STA	1,X
	SKIP1>
ROLSHF:
IFN	RORSW,<
	ROR	2,X
	ROR	3,X
IFN	ADDPRC,<	ROR	4,X>	;ONE MO TIME.
>
IFE	RORSW,<
	PHA
	LDAI	0
	BCC	SHFTR5
	LDAI	200
SHFTR5: LSR	2,X
	ORA	2,X
	STA	2,X
	LDAI	0
	BCC	SHFTR6
	LDAI	200
SHFTR6: LSR	3,X
	ORA	3,X
	STA	3,X
IFN	ADDPRC,<
	LDAI	0
	BCC	SHFT6A
	LDAI	200
SHFT6A: LSR	4,X
	ORA	4,X
	STA	4,X>>
IFN	RORSW,<ROR	A,>	;ROTATE ARGUMENT 1 BIT RIGHT.
IFE	RORSW,<
	PLA
	PHP
	LSR	A,
	PLP
	BCC	SHFTR7
	ORAI	200>
SHFTR7: INY
	BNE	SHFTR3		;$$$ ( MOST EXPENSIVE ! )
SHFTRT: CLC			;CLEAR OUTPUT OF FACOV.
	RTS
PAGE
